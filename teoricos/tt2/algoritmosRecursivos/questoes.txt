1)

int fat(int n){
	int resp;
	if (n == 1) {
		resp = 1;
	} else {
		resp = n*fat(n-1);
	}
	return resp;
}

Neste exemplo a chamada recursiva é realizada em "resp = n*fat(n-1)" e a condição de parada é quando n assume o valor 1.


2)
int fib (int n) {
	int resp;
	if (n == 0 || n == 1){
		resp = 1;
	} else {
		resp = fib(n-1) + fib(n-2)
	}
	return resp;	
}

Nesse caso a chamada recursiva é realizada em resp = fib(n-1) + fib(n-2). A condição de parada é realizada quando n == 0 ou n == 1.

3) Mostrar números de 0 à 3

Iterativo:

void mostrar() {
	for(int i = 0; i < 4; i++){
		System.out.println(i); // 0, 1, 2, 3
	}
}

Recursivo:

void mostrar() {
	mostrar(0);
}

void mostrar(int i ) {
	if(i < 4) {
		System.out.println(i);
		mostrar(i + 1); 
	}
}

4) Por que o código abaixo imprime 2,1,0,0,1 e 2 ?

void printRecursivo(){
	printRecursivo(2);
}

void printRecursivo(int i){
	System.out.println(i);
	if (i > 0){
		printRecursivo(i - 1);
	}
	System.out.println(i);
}

O método acima é chamado pela primeira vez com o valor 2. Com isso na primeira chamada é impresso 2, e como em seguida entra na condição if i > 0 que é verdadeira enquanto o valor de passagem de parâmetro(i) for maior que 0. Sendo assim outra chamada recursiva é realizada com i - 1, repetindo o método inicial e imprimindo 1 e em seguida chamando novamente o método até i = 0; Com isso os métodos retornar (recursivamente) ao escodo original printando o valor de i naquele instante. Resumidamente:

i = 2 / printRecursivo(2) -> Tela: 2
if: true / printRecursivo(i - 1)
i = 1 / printRecursivo(1) -> Tela: 1
if: true / printRecursivo(i - 1) 
i = 0 / printRescursivo(0) -> Tela: 0
if: false / Tela: 0
Retorna as chamadas...
i = 1 / Tela : 1
i = 2 / Tela : 2 
Resultado final: 2, 1, 0, 0, 1, 2

5) O que o programa iterativo abaixo mostra na tela? 

void priemiro() {
	System.out.println("1o - inicio");
	segundo();
	System.out.println("1o - Fim");
}

void segundo() {
	System.out.println("2o - inicio e fim");
}

void main() {
	System.out.println("main - inicio");
	primeiro();
	System.out.println("main - fim");
}

Tela: 
main - inicio
1o - inicio
2o - inicio e fim
1o - fim
main - fim

14)
É mais fácil criar o algoritmo de fibonacci pela recursividade, porém a parte de um número grande de cáculos o algoritmo acaba ficando caro.
